var SCALE;
var arrZOOMS = [,21282,16355,10064,5540,2909,1485,752,378,190,95,48,24,12,6,3,1.48,0.74,0.37,0.19,0.10,0.03];

var SuncalcOverlay = function(map, position, date) {
	this.setMap(map);
	this.update(position, date);
};

var AnimateLine = function(Objekt) {
	//var animK = Raphael.animation({'stroke-width': 4}, 2000, 'linear', AnimateLineG(Objekt) );
	var animK = Raphael.animation({stroke: "#ffd700", 'stroke-width': 7}, 3000, 'elastic' );
	Objekt.animate(animK.repeat(8)); //Wiederholungen "Infinity" = unendlich
};

SuncalcOverlay.prototype = new google.maps.OverlayView();

$.extend(SuncalcOverlay.prototype, {

	RADIUS: 300,
	PADDING: 10,
	CURVE_TIME_INTERVAL: 1000*60*20,
	
	CIRCLE_ATTRS: 			['#000000', 0.5, 1, , ''],
	
	GREY_PATH_ATTRS: 		['#000000', 0.4, 1, , ''],
	
	SUNRISE_DIR_ATTRS: 		['#ffa500', 0.9, 6, , 'Sonnenaufgang, mit dem Bereich in dem die Sonne innerhalb eines Jahres aufgeht.', 'help'],
	SUNRISE_SECTOR_ATTRS: 	['#ffa500', 0.21],
	
	SUNSET_DIR_ATTRS: 		['#ff4500', 0.6, 6, , 'Sonnenuntergang, mit dem Bereich in dem die Sonne innerhalb eines Jahres untergeht.', 'help'], // Fehlerlinie
	SUNSET_SECTOR_ATTRS: 	['#ff4500', 0.13],
	
	SUNLIGHT_FILL_ATTRS:	['#ffd700', 0.2, 'Sonnensektor, der Bereich in dem sich die Sonne innerhalb eines Jahres bewegt.'],
	
	CURRENT_CURVE_ATTRS: 	['#ffd700', 0.7, 4, , 'Sonnenbahn an diesem Tag', 'help'],
	SUN_DIR_ATTRS: 			['#FE9A2E', 0.9, 5, , 'Sonnenstrahl f\u00FCr diesen Tag und Zeit', 'help'], // Sonnenlinie [Farbe, Transparenz, Breite, Gepunktet ('.' o. '-'), Title, Cursor]
	
	EDGE_SUNRISE_DIR_ATTRS: ['#ffd700', 0.9, 1],
	EDGE_SUNSET_DIR_ATTRS: 	['#ff4500', 0.7, 1],
	
	SCHATTEN_DIR_ATTRS: 	['#000000', 0.5, 9, , 'Schattenlinie', 'help'], // Schatten Linie festlegen
	NSWO_DIR_ATTRS:		 	['#000000', 0.4, 1, '- ', 'Fadenkreuz', 'help'], // Linie fuer Fadenkreuz NordSued, WestOst festlegen

	update: function(position, date, gezoomt) {
		// Meter pro Pixel fuer jeweiligen MapZoom
		var map = this.getMap();
		var zoom = map.getZoom();
		SCALE = arrZOOMS[zoom];
	
		if (this._position != position) {
			this._positionChanged = true;
			this._position = position;
		}
		if (this._date != date) {
			if (this._date && (this._date.getFullYear() == date.getFullYear()) &&
					(this._date.getDate() == date.getDate()) &&
					(this._date.getMonth() == date.getMonth())) {
				this._timeChanged = true;
			} else {
				this._dayChanged = true;
			}
			this._date = date;
		}
		if (gezoomt == 'gezoomt') {
			this._positionChanged = true;
			this._position = position;
			gezoomt == '';
		}
		
		if (this._initialized && (this._positionChanged || this._dayChanged || this._timeChanged)) {
			this.draw();
		}
	},
	
	onAdd: function() {
		if($('#map').height() > $('#map').width()) {
			this.RADIUS = ($('#map').width() - 80) / 2;
		}else{
			this.RADIUS = ($('#map').height() - 80) / 2;
		}
		this._centerX = this._centerY = this.RADIUS + this.PADDING;
		this._width = this._centerX * 2;
		this._height = this._centerY * 2;
		
		this._container = document.createElement('div');
		this._container.style.position = 'absolute';

		//Meine Sonne Style
		this._sonne = document.createElement('div');
		this._sonne.style.position = 'absolute';
		this._sonne.style.borderStyle = 'solid';
		this._sonne.style.borderColor = '#F7F2E0';
		this._sonne.style.borderWidth = '2px';
		this._sonne.style.borderRadius = '16px'; // Standard
		this._sonne.style.MozBorderRadius = '16px'; // Mozilla
		this._sonne.style.WebkitBorderRadius = '16px'; // WebKit
		this._sonne.style.width = '28px';
		this._sonne.style.height = '28px';
		this._sonne.style.marginLeft = '-16px';
		this._sonne.style.marginTop = '-16px';
		this._sonne.style.background = '#FE9A2E';
		this._sonne.style.cursor = 'help';
		this._sonne.style.opacity = '0.8';
		this._sonne.filter = 'alpha(opacity=80)';
		this._sonne.title = 'Position der Sonne';
		//Meine Himmelsrichtungen Style
		this._himriN = document.createElement('div');
		this._himriN.style.position = 'absolute';
		this._himriN.style.background = '#FFFFFF';
		this._himriN.style.color = '#6E6E6E';
		this._himriN.style.width = '12px';
		this._himriN.style.height = '15px';
		this._himriN.style.fontSize = '12px';
		this._himriN.style.textAlign = 'center';
		this._himriN.style.marginLeft = '-6px';
		this._himriN.style.marginTop = '-6px';
		this._himriN.style.cursor = 'help';
		this._himriN.innerHTML = 'N';
		this._himriN.title = "Nord [0\u00B0]";
		this._himriO = document.createElement('div');
		this._himriO.style.position = 'absolute';
		this._himriO.style.background = '#FFFFFF';
		this._himriO.style.color = '#6E6E6E';
		this._himriO.style.width = '12px';
		this._himriO.style.height = '15px';
		this._himriO.style.fontSize = '12px';
		this._himriO.style.textAlign = 'center';
		this._himriO.style.marginLeft = '-9px';
		this._himriO.style.marginTop = '-9px';
		this._himriO.style.cursor = 'help';
		this._himriO.innerHTML = 'O';
		this._himriO.title = "Ost [90\u00B0]";
		this._himriS = document.createElement('div');
		this._himriS.style.position = 'absolute';
		this._himriS.style.background = '#FFFFFF';
		this._himriS.style.color = '#6E6E6E';
		this._himriS.style.width = '12px';
		this._himriS.style.height = '15px';
		this._himriS.style.fontSize = '12px';
		this._himriS.style.textAlign = 'center';
		this._himriS.style.marginLeft = '-6px';
		this._himriS.style.marginTop = '-8px';
		this._himriS.style.cursor = 'help';
		this._himriS.innerHTML = 'S';
		this._himriS.title = "S\u00FCd [180\u00B0]";
		this._himriW = document.createElement('div');
		this._himriW.style.position = 'absolute';
		this._himriW.style.background = '#FFFFFF';
		this._himriW.style.color = '#6E6E6E';
		this._himriW.style.width = '12px';
		this._himriW.style.height = '15px';
		this._himriW.style.fontSize = '12px';
		this._himriW.style.textAlign = 'center';
		this._himriW.style.marginLeft = '-4px';
		this._himriW.style.marginTop = '-9px';
		this._himriW.style.cursor = 'help';
		this._himriW.innerHTML = 'W';
		this._himriW.title = "West [270\u00B0]";
		
		this._paper = Raphael(this._container, this._width, this._height);
		//this._paper.setStart();
		
		//background circle
		this._circle = this._paper.circle(this._centerX, this._centerY, this.RADIUS);
		this._circle.attr(this._genPathAttrs(this.CIRCLE_ATTRS));
		
		//sunlight area
		this._sunlightFill = this._paper.path().attr(this._genFillAttrs(this.SUNLIGHT_FILL_ATTRS));
		
		//June 21
		this._jun21Curve = this._paper.path().attr(this._genPathAttrs(this.GREY_PATH_ATTRS));
		
		//December 21
		this._dec21Curve = this._paper.path().attr(this._genPathAttrs(this.GREY_PATH_ATTRS));
		
		//Sonnenaufgang/Sonnenuntergang Sektor fuer das ganze Jahr
		this._sunriseSector = this._paper.path().attr(this._genFillAttrs(this.SUNRISE_SECTOR_ATTRS)).hide();
		this._sunsetSector = this._paper.path().attr(this._genFillAttrs(this.SUNSET_SECTOR_ATTRS)).hide();
		
		//current day
		this._sunriseDir = this._paper.path().attr(this._genPathAttrs(this.SUNRISE_DIR_ATTRS));
		this._sunsetDir = this._paper.path().attr(this._genPathAttrs(this.SUNSET_DIR_ATTRS));
		
		// Sonnenlinie deklarieren
		this._sunDir = this._paper.path().attr(this._genPathAttrs(this.SUN_DIR_ATTRS));
		AnimateLine(this._sunDir); // Animieren		
		
		// Schatten deklarieren
		this._schattenDir = this._paper.path().attr(this._genPathAttrs(this.SCHATTEN_DIR_ATTRS));
		
		// Linie NSWO deklarieren
		this._nsDir = this._paper.path().attr(this._genPathAttrs(this.NSWO_DIR_ATTRS));
		this._woDir = this._paper.path().attr(this._genPathAttrs(this.NSWO_DIR_ATTRS));
		
		this._currentCurve = this._paper.path().attr(this._genPathAttrs(this.CURRENT_CURVE_ATTRS));
		
		function bind(fn, obj) {
			return function() {
				return fn.apply(obj, arguments);
			}
		}
		
		this._sunriseDir.hover(bind(this._sunriseSector.show, this._sunriseSector), bind(this._sunriseSector.hide, this._sunriseSector));
		this._sunsetDir.hover(bind(this._sunsetSector.show, this._sunsetSector), bind(this._sunsetSector.hide, this._sunsetSector));
		
		// war frueher "this.getPanes().overlayLayer.appendChild()"
		this.getPanes().overlayMouseTarget.appendChild(this._container);
		this.getPanes().overlayMouseTarget.appendChild(this._sonne); // Meine Sonne
		this.getPanes().overlayMouseTarget.appendChild(this._himriO); // Himmelsrichtung
		this.getPanes().overlayMouseTarget.appendChild(this._himriS); // Himmelsrichtung
		this.getPanes().overlayMouseTarget.appendChild(this._himriW); // Himmelsrichtung
		this.getPanes().overlayMouseTarget.appendChild(this._himriN);
		
		// google.maps.event.addDomListener(this._sonne, 'mouseover', function(){ alert('mouseover') });

		this._initialized = true;
	},
	
	draw: function() {
		var projection = this.getProjection();
		var pos = projection.fromLatLngToDivPixel(this._position);
		this._container.style.left = (pos.x - this._centerX) + 'px';
		this._container.style.top = (pos.y - this._centerY) + 'px';
		
		if (this._positionChanged) {
			this._drawYearInfo();
			this._drawCurrentDayInfo();
			this._drawCurrentTimeInfo();
		} else if (this._dayChanged) {
			this._drawCurrentDayInfo();
			this._drawCurrentTimeInfo();
		} else if (this._timeChanged) {
			this._drawCurrentTimeInfo();
		}
		this._positionChanged = this._dayChanged = this._timeChanged = false;
	},
	
	onRemove: function() {
		this.getPanes().overlayMouseTarget.removeChild(this._container);
		this.getPanes().overlayMouseTarget.removeChild(this._sonne);
		this.getPanes().overlayMouseTarget.removeChild(this._himriN);
		this.getPanes().overlayMouseTarget.removeChild(this._himriO);
		this.getPanes().overlayMouseTarget.removeChild(this._himriS);
		this.getPanes().overlayMouseTarget.removeChild(this._himriW);
	},
		
	_drawYearInfo: function() {
		var jun21 = this._getLongestDay(),
			jun21di = this._getDayInfo(jun21),
			jun21CurvePath = this._getCurvePathStr(jun21di, jun21);
			
		this._jun21Curve.attr('path', jun21CurvePath);
		
		var dec21 = this._getShortestDay(),
			dec21di = this._getDayInfo(dec21),
			dec21CurvePath = this._getCurvePathStr(dec21di, dec21);
			
		this._dec21Curve.attr('path', dec21CurvePath);
		
		var sunriseSectorPath = this._getSectorPathStr(jun21di.sunrise.start, dec21di.sunrise.start);
		
		var sunlightFillPath = sunriseSectorPath ? this._getSunlightFillPath(jun21CurvePath, dec21CurvePath) : '';
		this._sunlightFill.attr('path', sunlightFillPath);
		
		this._sunriseSector.attr('path', sunriseSectorPath);
		this._sunsetSector.attr('path', this._getSectorPathStr(dec21di.sunset.end, jun21di.sunset.end));
		
		// Hier Fadenkreuz fuer NSWO generieren
		var PathWO = ['M', this.PADDING, this._centerY, 'L', this.RADIUS*2 + this.PADDING, this._centerY];
		var PathNS = ['M', this._centerX, this.PADDING, 'L', this._centerX, this.RADIUS*2 + this.PADDING];
		this._woDir.attr('path', PathWO);
		this._nsDir.attr('path', PathNS);
		// Himmelsrichtungsanzeige ausrichten
		var ContainerLeft = parseFloat(this._container.style.left); // to Number
		var ContainerTop = parseFloat(this._container.style.top); // to Number
		this._himriN.style.left = ContainerLeft + this._centerX + 'px';
		this._himriN.style.top = ContainerTop + 'px';
		this._himriS.style.left = ContainerLeft + this._centerX + 'px';
		this._himriS.style.top = ContainerTop + this._centerY*2 + 'px';
		this._himriW.style.left = ContainerLeft + 'px';
		this._himriW.style.top = ContainerTop + this._centerY + 'px';
		this._himriO.style.left = ContainerLeft + this._centerX*2 + 'px';
		this._himriO.style.top = ContainerTop + this._centerY + 'px';
	},
	
	_drawCurrentDayInfo: function() {
		var di = this._getDayInfo(this._date);
		this._sunriseDir.attr('path', this._getPosPathStrSet(di.sunrise.start));
		this._sunsetDir.attr('path', this._getPosPathStrSet(di.sunset.end));// NEU
		this._currentCurve.attr('path', this._getCurvePathStr(di, this._date));
	},
	
	_drawCurrentTimeInfo: function() {
		// Sonnenlinie zeichnen (gelb)
		this._sunDir.attr('path', this._getPosPathStr(this._date));
		
		// Schatten Linie zeichnen (schwarz)
		this._schattenDir.attr('path', this._getPosPathSchattenStr(this._date));
		
		// Meine Sonne bewegen
		var posPoint = this._getSunPosPoint(this._date);
		if (posPoint.altitude < -0.014) { // Nacht war vorher 0,018
			this._sonne.style.background = '#111111';
			this._sonne.style.opacity = '0.2';
			this._sonne.filter = 'alpha(opacity=20)';
		} else {
			this._sonne.style.background = '#FE9A2E';
			this._sonne.style.opacity = '0.8';
			this._sonne.filter = 'alpha(opacity=80)';
		}
		var ContainerLeft = parseFloat(this._container.style.left); // to Number
		var ContainerTop = parseFloat(this._container.style.top); // to Number
		this._sonne.style.left = (posPoint.x + ContainerLeft) + 'px';
		this._sonne.style.top = (posPoint.y + ContainerTop) + 'px';
	},
	
	_getSunlightFillPath: function(jun21CurvePath, dec21CurvePath) {
		if (!jun21CurvePath || !dec21CurvePath) { return ''; }
	
		var r = this.RADIUS,
			path = dec21CurvePath.concat(['A', r, r, 0, 0, 1]);
		
		for (var start = jun21CurvePath.length - 3, i = start; i >= 0; i-= 3) {
			if (i != start) {
				path.push('L');
			}
			path.push(jun21CurvePath[i+1]);
			path.push(jun21CurvePath[i+2]);
		}
		
		path = path.concat(['A', r, r, 0, 0, 1, path[1], path[2]]);
		return path;
	},
	
	_getSectorPathStr: function(date1, date2) {
		var p1 = this._getSunPosPoint(date1),
			p2 = this._getSunPosPoint(date2),
			r = this.RADIUS;
		if (isNaN(p1.x) || isNaN(p2.x)) { return ''; }
			
		return ['M', this._centerX, this._centerY, 'L', p1.x, p1.y, 'A', r, r, 0, 0, 1, p2.x, p2.y, 'z'];
	},
	
	_getPosPathStr: function(date) {
		var posPoint = this._getSunPosPoint(date);
		// Hier Fehler 23.08.2014 - 12.09.2014 deshalb jetzt _getPosPathStrSet
		if (posPoint.altitude < -0.014) { return ''; } //war vorher 0,018
		return ['M', this._centerX, this._centerY, 'L', posPoint.x, posPoint.y];
	},
	// NEU *****************
	_getPosPathStrSet: function(date) {
		var posPoint = this._getSunPosPoint(date);
		//if (posPoint.altitude < -0.018) { return ''; } // LÃ¶sste den Fehler aus !!!!!!!
		return ['M', this._centerX, this._centerY, 'L', posPoint.x, posPoint.y];
	},
	
	// Schatten Linie berechnen
	_getPosPathSchattenStr: function(date) {
		var posPoint = this._getSchattenPosPoint(date);
		if (posPoint.altitude < 0.00) { return ''; }
		return ['M', this._centerX, this._centerY, 'L', posPoint.x, posPoint.y];
	},
	
	_getCurvePathStr: function(di, date) {
		var dates = [];
		
		var start = isNaN(di.sunrise.start) ? date : di.sunrise.start,
			end = isNaN(di.sunset.end) ? new Date(date).setDate(date.getDate() + 1) : di.sunset.end;
		
		var date = new Date(start);
		while (date < end) {
			dates.push(new Date(date));
			date.setTime(date.valueOf() + this.CURVE_TIME_INTERVAL);
		}
		
		dates.push(end);

		var path = [],
			belowHorizon = true;
		for (var i = 0, len = dates.length; i < len; i++) {
			var posPoint = this._getSunPosPoint(dates[i]);
			belowHorizon = belowHorizon && (posPoint.altitude < 0);
			path.push(!i ? 'M' : 'L');
			path.push(posPoint.x);
			path.push(posPoint.y);
		}
		if (belowHorizon) { return ''; }
		return path;
	},
	
	_getDayInfo: function(date) {
		return SunCalc.getDayInfo(date, this._position.lat(), this._position.lng());
	},
	
	_getSunPosPoint: function(date) {
		var pos = SunCalc.getSunPosition(date, this._position.lat(), this._position.lng()),
			angle = Math.PI/2 + pos.azimuth;
		return {
			x: this._centerX + this.RADIUS * Math.cos(angle) * Math.cos(pos.altitude),
			y: this._centerY + this.RADIUS * Math.sin(angle) * Math.cos(pos.altitude),
			altitude: pos.altitude
		};
	},
	
	_getSchattenPosPoint: function(date) {
		var pos = SunCalc.getSunPosition(date, this._position.lat(), this._position.lng()),
			angle = Math.PI/2 + pos.azimuth;
			var h = $('#meter').val(); 					// Hoehe des Schattenobjektes in Meter
			var s = h / Math.tan(pos.altitude); 	// Schattenlaenge in Meter
			//console.log(SCALE);
			var pixSchatten = s/SCALE 							// Schattenlaenge in Pixel
				return {
					x: this._centerX - pixSchatten * Math.cos(angle) * Math.cos(pos.altitude),
					y: this._centerY - pixSchatten * Math.sin(angle) * Math.cos(pos.altitude),
					altitude: pos.altitude
				};
	},
	
	_getShortestDay: function() {
		var date = new Date(this._date);
		date.setMonth(11);
		date.setDate(21);
		return date;
	},
	
	_getLongestDay: function() {
		var date = new Date(this._date);
		date.setMonth(5);
		date.setDate(21);
		return date;
	},
	
	_genPathAttrs: function(arr) {
		return {
			'stroke': arr[0], 
			'stroke-opacity': arr[1],
			'stroke-width': arr[2],
			'stroke-dasharray': arr[3],
			'title': arr[4],
			'cursor': arr[5]
		};
	},
	
	_genFillAttrs: function(arr) {
		return {
			'fill': arr[0], 
			'fill-opacity': arr[1],
			'title': arr[2],
			'stroke': 'none'
		};
	}
});