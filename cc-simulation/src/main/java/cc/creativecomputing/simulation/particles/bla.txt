#version 120 

uniform sampler2D randomTexture;

float noise( in vec3 x ){
    vec3 p = floor(x);
    vec3 f = fract(x);
	f = f * f * (3.0 - 2.0 * f);
	
	vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;
	vec2 rg = texture2D( randomTexture, (uv+ 0.5) / 256.0 ).yx;//, -100.0
	return mix( rg.x, rg.y, f.z );
}

float octavedNoise(in vec3 p, int octaves, float gain, float lacunarity){
	float result = 0.0;
	float myFallOff = gain;
	float myAmp = 0.0;
	
	vec3 q = p;
	for(int i = 0; i < octaves; i++){
		myAmp += myFallOff;
		result += myFallOff * noise( q ); 
		q = q * lacunarity;
		myFallOff *= gain;
	}
	
	return result / myAmp;
}

uniform float deltaTime;

uniform sampler2DRect colorTexture;
uniform sampler2DRect staticPositions;
uniform sampler2DRect positionTexture;
uniform sampler2DRect velocityTexture;
uniform sampler2DRect infoTexture;
uniform float staticPositionBlend;

// insert forces
uniform vec3 gravity0_direction;
uniform float gravity0_strength;

vec3 gravity0_function(vec3 thePosition, vec3 theVelocity, vec2 theTexID, float theDeltaTime){
	return gravity0_direction * gravity0_strength; 
}


// insert constraints

vec3 bounceReflection(
	vec3 theVelocity, vec3 theNormal, float thePlacement,
	float theResilience, float theFriction, float theMinimalVelocity
){
	// Distibute velocity to normal and tangential contributions.
	float normalContribution = dot(theVelocity, theNormal);
	vec3 vNormal = normalContribution * theNormal;
	vec3 vTangent = theVelocity - vNormal;
	
	if (thePlacement < 0){
		// Get particle outside the collider as quickly as possible,
		// either with original or reflected velocity.
		
		if (normalContribution <= 0.0){
			return vTangent - vNormal;
		} else {
			return theVelocity;
		}
	} 
	
	// Slow down particle with friction only if slower than minimal velocity.
	if (length(theVelocity) < theMinimalVelocity)
		theFriction = 1.0;

	// Slowdown tangential movement with friction (in theory 1 - friction)
	// and reflected normal movement via resilience factor.
	return vTangent * theFriction - vNormal * theResilience;
}



uniform vec3 sphereConstraint1_center;
uniform float sphereConstraint1_radius;
	
uniform float sphereConstraint1_resilience;
uniform float sphereConstraint1_friction;
uniform float sphereConstraint1_minimalVelocity;

uniform float sphereConstraint1_inside;
	
vec3 sphereConstraint1_function(vec3 theVelocity, vec3 thePosition, vec2 theTexID,float theDeltaTime){
	vec3 delta = (thePosition + theVelocity * theDeltaTime) - sphereConstraint1_center;
	float dist = length(delta);

	if ((dist - sphereConstraint1_radius) * sphereConstraint1_inside < 0) return theVelocity;
		
	return bounceReflection(
		theVelocity, 
		delta / dist,
		distance(thePosition, sphereConstraint1_center) - sphereConstraint1_radius,
		sphereConstraint1_resilience, 
		sphereConstraint1_friction, 
		sphereConstraint1_minimalVelocity
	);
}


void main (){
	vec2 texID = gl_FragCoord.xy;
	vec3 position = texture2DRect (positionTexture, texID).xyz;
	vec3 velocity = texture2DRect (velocityTexture, texID).xyz;
	vec4 color = texture2DRect (colorTexture, texID);
	vec3 acceleration = vec3(0,0,0);

// apply forces
	acceleration = acceleration + gravity0_function(position,velocity,texID,deltaTime);

	velocity = velocity + acceleration * (deltaTime * 60);

// apply constraints


	velocity = sphereConstraint1_function(velocity, position,texID, deltaTime)	
	
	/*
	for(int i = 0; i < constraints.length;i++){
		velocity = constraints[i].constraint(velocity, position,texID, deltaTime);
	}
	
	for(int i = 0; i < impulses.length;i++){
		velocity += impulses[i].impulse(position,velocity, texID, deltaTime);
	}
	*/
	vec4 lastInfo = texture2DRect(infoTexture, texID);
	float myAge = lastInfo.x;
	int myStep = int(lastInfo.w);
	
	vec4 info = vec4(
		lastInfo.x + deltaTime,
		lastInfo.y,
		lastInfo.z,
		lastInfo.w
	);
	
	if(myAge >= lastInfo.y && lastInfo.z == 0.0)position = vec3(1000000,0,0);
	
	vec3 staticPosition = texture2DRect (staticPositions, texID).xyz;
	vec4 newPosition = vec4(mix(position + deltaTime * velocity, staticPosition, staticPositionBlend),1); 
	
	gl_FragData[0] = newPosition;
	gl_FragData[1] = info;
	gl_FragData[2] = vec4(velocity, 1.0);
	gl_FragData[3] = color;
}